/**
\mainpage
\htmlinclude manifest.html

\b diagnostics_analysis This is a set of tools for analyzing and processing diagnostic bagfiles. This is primarily used in analyzing bag files from automatic PR-2 logs. The main tool is export_csv.py, which converts bag files into a series of CSV files.

\section codeapi Code API

The main tool in this package is export_csv.py, which generates CSV files from diagnostics bagfiles. This can generate fairly large CSV files, since one row will be written for every status message. It may help to use "sparse" bag files created by sparse_csv.py. 

\subsection export_csv.py export_csv.py

export_csv.py processes diagnostic bagfiles in to a series of CSV files. Every diagnostic status name is moved to a different CSV file. Output CSV's are put in the output/ directory.

\verbatim
$ ./export_csv.py my_bagfile_2009_07_24-topic.bag
\endverbatim

\par Example

The above code will export my_bagfile... into the directory output/my_bagfile_2009_07_24-topic_csv/. There will be separate bag files for each status name. 

\subsection sparse_csv.py sparse_csv.py

If your CSV file is too big, it may not be readable by common spreadsheet editor, such as Open Office. To solve this problem, you can make a "sparse" CSV by removing every nth line from the file.

\verbatim
$ rosrun diagnostics_analysi sparse_csv.py output/my_bagfile_2009_07_24-topic_csv/status_name.csv -m
\endverbatim

This makes the file output/my_bagfile_2009_07_24-topic_csv/status_name_sprs_len.csv, and makes sure it is no longer than 65000 lines.


*/